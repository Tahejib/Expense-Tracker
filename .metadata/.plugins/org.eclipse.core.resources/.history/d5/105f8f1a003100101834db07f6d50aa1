package com.expensetracker.controller;

import com.expensetracker.model.Expense;
import com.expensetracker.model.User;
import com.expensetracker.repository.UserRepository;
import com.expensetracker.service.ExpenseService;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.io.IOException;
import java.io.PrintWriter;
import java.security.Principal;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

@Controller
public class ExpenseController {

    @Autowired
    private ExpenseService expenseService;
    
    @Autowired
    private UserRepository userRepository;


    // Shared chart data method
    private void addChartDataToModel(String username, Model model) {
        Map<String, Double> categorySummary = expenseService.getCategorySummary(username);
        Map<String, Double> monthlySummary = expenseService.getMonthlySummary(username);
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            String categorySummaryJson = objectMapper.writeValueAsString(categorySummary);
            String monthlySummaryJson = objectMapper.writeValueAsString(monthlySummary);
            model.addAttribute("categorySummaryJson", categorySummaryJson);
            model.addAttribute("monthlySummaryJson", monthlySummaryJson);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @GetMapping("/expenses")
    public String listExpenses(Model model, @RequestParam(defaultValue = "1") int page) {
        PageRequest pageRequest = PageRequest.of(page - 1, 10); // 10 items per page
        Page<Expense> expensesPage = expenseService.getExpenses(pageRequest);
        model.addAttribute("expenses", expensesPage.getContent());
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", expensesPage.getTotalPages());
        return "expenses";  // returns the updated template
    }


    
    @PostMapping("/save")
    public String saveExpense(@ModelAttribute Expense expense, Principal principal) {
        String username = principal.getName();
        User user = userRepository.findByUsername(username)
                      .orElseThrow();
        expense.setUser(user);
        expenseService.saveExpense(expense);
        return "redirect:/expenses";
    }

    @PostMapping("/expenses/add")
    public String addExpense(@ModelAttribute Expense expense,
                             @AuthenticationPrincipal UserDetails userDetails) {
        if (userDetails == null) {
            return "redirect:/login";
        }

        String username = userDetails.getUsername();
        expenseService.saveExpenseForUser(expense, username);

        return "redirect:/expenses";
    }

    @GetMapping("/editExpense/{id}")
    public String editExpenseForm(@PathVariable Long id, Model model,
                                  @AuthenticationPrincipal UserDetails userDetails) {
        String username = userDetails.getUsername();
        Expense expense = expenseService.getExpenseById(id);
        List<Expense> expenses = expenseService.getExpensesForUser(username);

        model.addAttribute("expense", expense);
        model.addAttribute("expenses", expenses);
        addChartDataToModel(username, model);

        return "expenses";
    }

    @GetMapping("/deleteExpense/{id}")
    public String deleteExpense(@PathVariable Long id) {
        expenseService.deleteExpenseById(id);
        return "redirect:/expenses";
    }

    @GetMapping("/filter")
    public String filterExpensesByDateRange(@RequestParam String fromDate,
                                            @RequestParam String toDate,
                                            @AuthenticationPrincipal UserDetails userDetails,
                                            Model model) {
        String username = userDetails.getUsername();
        List<Expense> filteredExpenses = expenseService.getExpensesForUser(username)
                .stream()
                .filter(e -> !e.getDate().isBefore(java.time.LocalDate.parse(fromDate)) &&
                             !e.getDate().isAfter(java.time.LocalDate.parse(toDate)))
                .toList();

        model.addAttribute("expenses", filteredExpenses);
        model.addAttribute("expense", new Expense());
        addChartDataToModel(username, model);

        return "expenses";
    }

    @GetMapping("/expenses/sort")
    public String sortExpenses(@RequestParam String sortBy,
                               @AuthenticationPrincipal UserDetails userDetails,
                               Model model) {
        String username = userDetails.getUsername();
        List<Expense> sortedExpenses = expenseService.getSortedExpenses(username, sortBy);

        model.addAttribute("expenses", sortedExpenses);
        model.addAttribute("expense", new Expense());
        addChartDataToModel(username, model);

        return "expenses";
    }

    private List<String> getPredefinedCategories() {
        return List.of("Food", "Travel", "Health", "Utilities", "Entertainment", "Shopping", "Other");
    }

    @GetMapping("/expenses/export")
    public void exportToCSV(HttpServletResponse response, Principal principal) throws IOException {
        response.setContentType("text/csv");
        String headerKey = "Content-Disposition";
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
        String headerValue = "attachment; filename=expenses_" + timestamp + ".csv";
        response.setHeader(headerKey, headerValue);

        List<Expense> expenses = expenseService.getAllExpenses(principal.getName());

        PrintWriter writer = response.getWriter();
        writer.println("ID,Title,Amount,Category,Date");

        for (Expense exp : expenses) {
            writer.println(exp.getId() + "," +
                           exp.getTitle() + "," +
                           exp.getAmount() + "," +
                           exp.getCategory() + "," +
                           exp.getDate());
        }

        writer.flush();
        writer.close();
    }

    @GetMapping("/expenses/filterByCategory")
    public String filterExpensesByCategory(@RequestParam(required = false) Integer month,
                                           @RequestParam(required = false) Integer year,
                                           Model model,
                                           Principal principal) {
        String username = principal.getName();
        List<Expense> filteredExpenses = expenseService.getExpensesByMonthYear(month, year, username);

        model.addAttribute("expenses", filteredExpenses);
        model.addAttribute("newExpense", new Expense());
        model.addAttribute("categories", expenseService.getAllCategories());
        addChartDataToModel(username, model);

        return "expenses";
    }

    @GetMapping("/expenses/search")
    public String searchExpenses(@RequestParam String keyword,
                                 @AuthenticationPrincipal UserDetails userDetails,
                                 Model model) {
        String username = userDetails.getUsername();
        List<Expense> searchResults = expenseService.searchExpensesByTitle(username, keyword);

        model.addAttribute("expenses", searchResults);
        model.addAttribute("expense", new Expense());
        model.addAttribute("categories", getPredefinedCategories());
        addChartDataToModel(username, model);

        return "expenses";
    }
    
    

  //  @PostMapping("/forgot-password")
  //  public String handleForgotPassword(@RequestParam String email, RedirectAttributes redirectAttributes) {
    //    // Here you would normally check if the email exists and send reset instructions
      //  redirectAttributes.addAttribute("sent", "true");
        //return "redirect:/forgot-password";
    //}//
    @PostMapping("/forgot-password")
    public String processForgotPassword(@RequestParam("email") String email) {
        // Later: validate email, send token, etc.
        return "redirect:/login?resetRequested"; // Show a message
    }


}
